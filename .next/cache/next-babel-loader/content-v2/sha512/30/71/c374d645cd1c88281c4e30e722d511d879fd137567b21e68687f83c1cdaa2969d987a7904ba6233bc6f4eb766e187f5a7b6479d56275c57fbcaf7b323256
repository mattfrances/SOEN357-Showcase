{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport firebase from \"../firebase/init\";\nconst db = firebase.firestore();\nexport const fetchUser = async ({\n  username,\n  userID\n}) => {\n  let userQuerySnapShot;\n\n  if (username) {\n    userQuerySnapShot = await db.collection(\"users\").where(\"username\", \"==\", username).get();\n\n    if (userQuerySnapShot.empty) {\n      return null;\n    }\n\n    return _objectSpread(_objectSpread({}, userQuerySnapShot.docs[0].data()), {}, {\n      uid: userQuerySnapShot.docs[0].id\n    });\n  }\n\n  if (userID) {\n    userQuerySnapShot = await db.collection(\"users\").doc(userID).get();\n\n    if (userQuerySnapShot.exists) {\n      return _objectSpread(_objectSpread({}, userQuerySnapShot.data()), {}, {\n        uid: userQuerySnapShot.id\n      });\n    } else {\n      return null;\n    }\n  }\n};\nexport const fetchUserTweets = async userID => {\n  const tweetsQuerySnapShot = await db.collection(\"tweets\").where(\"authorId\", \"==\", userID).where(\"parentTweet\", \"==\", null).get();\n  const fetchedUser = await fetchUser({\n    userID\n  }); // tweets = tweets Array of  Objects\n\n  const tweets = tweetsQuerySnapShot.docs.map(tweet => {\n    const data = tweet.data();\n    return _objectSpread(_objectSpread({\n      id: tweet.id\n    }, data), {}, {\n      author: fetchedUser,\n      createdAt: data.createdAt.toDate().toString()\n    });\n  }); // returns array of objects (tweets)\n\n  return tweets;\n};\nexport const fetchTweet = async tweetID => {\n  const tweet = await firebase.firestore().collection(\"tweets\").doc(tweetID).get();\n  if (!tweet.exists) return null;\n  const user = await fetchUser({\n    userID: tweet.data().authorId\n  });\n  return _objectSpread(_objectSpread({}, tweet.data()), {}, {\n    author: user,\n    id: tweetID,\n    createdAt: tweet.data().createdAt.toDate().toString()\n  });\n};\nexport const fetchUserFollowers = async userID => {\n  return await db.collection(\"connections\").where(\"followeeID\", \"==\", userID).get();\n};\nexport const fetchUserFollowings = async userID => {\n  return await db.collection(\"connections\").where(\"followerID\", \"==\", userID).get();\n};\nexport const fetchTweetLikes = tweetID => {\n  return firebase.firestore().collection(\"likes\").where(\"tweetID\", \"==\", tweetID).get();\n};\nexport const fetchTweetSaves = tweetID => {\n  return firebase.firestore().collection(\"saves\").where(\"tweetID\", \"==\", tweetID).get();\n}; // export const fetchTweets = (queryParams) => {\n//   let dbQuery = firebase.firestore().collection(\"tweets\");\n//   if (queryParams.tags.length > 0) {\n//     queryParams.tags.forEach(tag => {\n//       dbQuery = dbQuery.where(\"tags\", \"array-contains\", tag);\n//     });\n//   }\n//   if (queryParams.text) {\n//   }\n// }\n\nconst fetchAllUserData = async username => {\n  let fetchedUser = await fetchUser({\n    username\n  });\n\n  if (fetchedUser === null) {\n    return null;\n  }\n\n  const tweets = await fetchUserTweets(fetchedUser.uid);\n  const followersCount = (await fetchUserFollowers(fetchedUser.uid)).size;\n  const followingsCount = (await fetchUserFollowings(fetchedUser.uid)).size;\n  fetchedUser = _objectSpread(_objectSpread({}, fetchedUser), {}, {\n    followersCount,\n    followingsCount\n  });\n  return {\n    fetchedUser,\n    tweets\n  };\n};\n\nexport default fetchAllUserData;","map":{"version":3,"sources":["/Users/matthewfrances/Documents/development/School/Winter2021/SOEN357/twitter-clone/src/services/FetchData.js"],"names":["firebase","db","firestore","fetchUser","username","userID","userQuerySnapShot","collection","where","get","empty","docs","data","uid","id","doc","exists","fetchUserTweets","tweetsQuerySnapShot","fetchedUser","tweets","map","tweet","author","createdAt","toDate","toString","fetchTweet","tweetID","user","authorId","fetchUserFollowers","fetchUserFollowings","fetchTweetLikes","fetchTweetSaves","fetchAllUserData","followersCount","size","followingsCount"],"mappings":"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","sourcesContent":["import firebase from \"../firebase/init\";\n\nconst db = firebase.firestore();\n\nexport const fetchUser = async ({ username, userID }) => {\n  let userQuerySnapShot;\n\n  if (username) {\n    userQuerySnapShot = await db\n      .collection(\"users\")\n      .where(\"username\", \"==\", username)\n      .get();\n    if (userQuerySnapShot.empty) {\n      return null;\n    }\n    return {\n      ...userQuerySnapShot.docs[0].data(),\n      uid: userQuerySnapShot.docs[0].id,\n    };\n  }\n\n  if (userID) {\n    userQuerySnapShot = await db.collection(\"users\").doc(userID).get();\n    if (userQuerySnapShot.exists) {\n      return {\n        ...userQuerySnapShot.data(),\n        uid: userQuerySnapShot.id,\n      };\n    } else {\n      return null;\n    }\n  }\n};\n\nexport const fetchUserTweets = async (userID) => {\n  const tweetsQuerySnapShot = await db\n    .collection(\"tweets\")\n    .where(\"authorId\", \"==\", userID)\n    .where(\"parentTweet\", \"==\", null)\n    .get();\n\n  const fetchedUser = await fetchUser({ userID });\n\n  // tweets = tweets Array of  Objects\n  const tweets = tweetsQuerySnapShot.docs.map((tweet) => {\n    const data = tweet.data();\n\n    return {\n      id: tweet.id,\n      ...data,\n      author: fetchedUser,\n      createdAt: data.createdAt.toDate().toString(),\n    };\n  });\n  // returns array of objects (tweets)\n  return tweets;\n};\n\nexport const fetchTweet = async (tweetID) => {\n  const tweet = await firebase\n    .firestore()\n    .collection(\"tweets\")\n    .doc(tweetID)\n    .get();\n\n  if (!tweet.exists) return null;\n  const user = await fetchUser({ userID: tweet.data().authorId });\n  return {\n    ...tweet.data(),\n    author: user,\n    id: tweetID,\n    createdAt: tweet.data().createdAt.toDate().toString(),\n  };\n};\n\nexport const fetchUserFollowers = async (userID) => {\n  return await db\n    .collection(\"connections\")\n    .where(\"followeeID\", \"==\", userID)\n    .get();\n};\n\nexport const fetchUserFollowings = async (userID) => {\n  return await db\n    .collection(\"connections\")\n    .where(\"followerID\", \"==\", userID)\n    .get();\n};\n\nexport const fetchTweetLikes = (tweetID) => {\n  return firebase\n    .firestore()\n    .collection(\"likes\")\n    .where(\"tweetID\", \"==\", tweetID)\n    .get();\n};\n\nexport const fetchTweetSaves = (tweetID) => {\n  return firebase\n    .firestore()\n    .collection(\"saves\")\n    .where(\"tweetID\", \"==\", tweetID)\n    .get();\n};\n\n// export const fetchTweets = (queryParams) => {\n//   let dbQuery = firebase.firestore().collection(\"tweets\");\n  \n//   if (queryParams.tags.length > 0) {\n//     queryParams.tags.forEach(tag => {\n//       dbQuery = dbQuery.where(\"tags\", \"array-contains\", tag);\n//     });\n//   }\n\n//   if (queryParams.text) {\n\n//   }\n// }\n\nconst fetchAllUserData = async (username) => {\n  let fetchedUser = await fetchUser({ username });\n  if (fetchedUser === null) {\n    return null;\n  }\n  const tweets = await fetchUserTweets(fetchedUser.uid);\n  const followersCount = (await fetchUserFollowers(fetchedUser.uid)).size;\n  const followingsCount = (await fetchUserFollowings(fetchedUser.uid)).size;\n  fetchedUser = {\n    ...fetchedUser,\n    followersCount,\n    followingsCount,\n  };\n\n  return {\n    fetchedUser,\n    tweets,\n  };\n};\n\nexport default fetchAllUserData;\n"]},"metadata":{},"sourceType":"module"}