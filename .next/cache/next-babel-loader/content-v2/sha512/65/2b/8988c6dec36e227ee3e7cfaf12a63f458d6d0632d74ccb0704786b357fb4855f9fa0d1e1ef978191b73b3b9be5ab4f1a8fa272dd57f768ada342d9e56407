{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/matthewfrances/Documents/development/School/Winter2021/SOEN357/twitter-clone/src/components/Comments/Comments.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState } from \"react\";\nimport firebase from \"../../firebase/init\";\nimport { fetchUser } from \"../../services/FetchData\";\nimport Avatar from \"../Avatar/Avatar\";\n\nconst Comments = ({\n  tweetID\n}) => {\n  const {\n    0: comments,\n    1: setComments\n  } = useState([]);\n  useEffect(() => {\n    const getComments = async () => {\n      try {\n        firebase.firestore().collection(\"tweets\").where(\"parentTweet\", \"==\", tweetID).onSnapshot(async tweetsRef => {\n          const localComments = [];\n\n          for (let i = 0; i < tweetsRef.size; i++) {\n            const tweet = tweetsRef.docs[i].data({\n              serverTimestamps: \"estimate\"\n            });\n            const id = tweetsRef.docs[i].id;\n            const userInfo = await fetchUser({\n              userID: tweet.authorId\n            });\n            localComments.push(_objectSpread(_objectSpread({}, tweet), {}, {\n              id,\n              createdAt: tweet.createdAt.toDate().toString(),\n              author: userInfo\n            }));\n          }\n\n          setComments(localComments);\n        });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getComments();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white rounded-b-lg\",\n    children: comments && comments.length > 0 && comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-row\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"m-2 w-12 h-12\",\n          children: /*#__PURE__*/_jsxDEV(Avatar, {\n            src: comment.author.profilePicture\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col  w-full\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"bg-gray-200 p-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"inline-block font-poppins font-medium\",\n                children: comment.author.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"inline-block font-noto font-medium text-xs text-gray-600\",\n                children: [comment.createdAt, \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"p-2\",\n              children: /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"font-noto text-gray-700\",\n                children: comment.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, comment.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Comments;","map":{"version":3,"sources":["/Users/matthewfrances/Documents/development/School/Winter2021/SOEN357/twitter-clone/src/components/Comments/Comments.jsx"],"names":["useEffect","useState","firebase","fetchUser","Avatar","Comments","tweetID","comments","setComments","getComments","firestore","collection","where","onSnapshot","tweetsRef","localComments","i","size","tweet","docs","data","serverTimestamps","id","userInfo","userID","authorId","push","createdAt","toDate","toString","author","err","console","log","length","map","comment","profilePicture","name","text"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport firebase from \"../../firebase/init\";\nimport { fetchUser } from \"../../services/FetchData\";\nimport Avatar from \"../Avatar/Avatar\";\n\nconst Comments = ({ tweetID }) => {\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    const getComments = async () => {\n      try {\n        firebase\n          .firestore()\n          .collection(\"tweets\")\n          .where(\"parentTweet\", \"==\", tweetID)\n          .onSnapshot(async (tweetsRef) => {\n            const localComments = [];\n\n            for (let i = 0; i < tweetsRef.size; i++) {\n              const tweet = tweetsRef.docs[i].data({\n                serverTimestamps: \"estimate\",\n              });\n              const id = tweetsRef.docs[i].id;\n              const userInfo = await fetchUser({\n                userID: tweet.authorId,\n              });\n              localComments.push({\n                ...tweet,\n                id,\n                createdAt: tweet.createdAt.toDate().toString(),\n                author: userInfo,\n              });\n            }\n            setComments(localComments);\n          });\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    getComments();\n  }, []);\n\n  return (\n    <div className=\"bg-white rounded-b-lg\">\n      {comments &&\n        comments.length > 0 &&\n        comments.map((comment) => (\n          <div className=\"rounded-lg\" key={comment.id}>\n            <div className=\"flex flex-row\">\n              <div className=\"m-2 w-12 h-12\">\n                <Avatar src={comment.author.profilePicture} />\n              </div>\n              <div className=\"flex flex-col  w-full\">\n                <div className=\"bg-gray-200 p-4\">\n                  <div className=\"p-2\">\n                    <p className=\"inline-block font-poppins font-medium\">\n                      {comment.author.name}\n                    </p>\n                    <p className=\"inline-block font-noto font-medium text-xs text-gray-600\">\n                      {comment.createdAt}{\" \"}\n                    </p>\n                  </div>\n                  <div className=\"p-2\">\n                    <p className=\"font-noto text-gray-700\">{comment.text}</p>\n                  </div>\n                </div>\n                {/* <div className=\"flex flex-row py-4\">\n                  <button type=\"submit\">\n                    <span>\n                      <FavoriteBorderIcon />\n                    </span>\n                    Like\n                  </button>\n                  <p className=\"px-2\">.</p>\n                  <p className=\"font-noto font-semibold text-gray-400\">\n                    12k Likes\n                  </p>\n                </div> */}\n              </div>\n            </div>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Comments;\n"]},"metadata":{},"sourceType":"module"}