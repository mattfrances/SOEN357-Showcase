{"ast":null,"code":"import _regeneratorRuntime from \"/Users/matthewfrances/Documents/development/School/Winter2021/SOEN357/twitter-clone/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/matthewfrances/Documents/development/School/Winter2021/SOEN357/twitter-clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport firebase from \"../firebase/init\";\nimport { deleteTweet } from \"./DeleteTweet\";\nvar db = firebase.firestore();\nexport var deleteAccount = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(userID) {\n    var tweetsSnapShot;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            // Delete user from firebase authentication\n            // Delete user doc from \"users\" collection\n            db.collection(\"users\").doc(userID)[\"delete\"]().then(console.log(\"Deleted User Doc\"))[\"catch\"](function (e) {\n              return console.log(e);\n            }); // Get all tweets that has authorID = user.uid in \"tweets\" collection\n\n            _context.next = 3;\n            return db.collection(\"tweets\").where(\"authorId\", \"==\", userID).get();\n\n          case 3:\n            tweetsSnapShot = _context.sent;\n            tweetsSnapShot.forEach(function (tweetsDoc) {\n              // Delete those tweets\n              deleteTweet(tweetsDoc.id);\n            }); // Delete all connections\n\n            _context.next = 7;\n            return db.collection(\"connections\").where(\"followerID\", \"==\", userID).where(\"followeeID\", \"==\", userID).get().then(function (connectionsSnapShot) {\n              var batch = firebase.firestore().batch();\n              connectionsSnapShot.forEach(function (connectionDocRef) {\n                batch[\"delete\"](connectionDocRef.ref);\n              });\n              batch.commit().then(console.log(\"Deleted Connections\"))[\"catch\"](function (e) {\n                return console.log(e);\n              });\n            });\n\n          case 7:\n            firebase.auth().currentUser[\"delete\"]().then(function () {\n              return console.log(\"Deleted user from auth\");\n            })[\"catch\"](function (e) {\n              return console.log(e);\n            });\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function deleteAccount(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/matthewfrances/Documents/development/School/Winter2021/SOEN357/twitter-clone/src/services/DeleteAccount.js"],"names":["firebase","deleteTweet","db","firestore","deleteAccount","userID","collection","doc","then","console","log","e","where","get","tweetsSnapShot","forEach","tweetsDoc","id","connectionsSnapShot","batch","connectionDocRef","ref","commit","auth","currentUser"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,kBAArB;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,IAAMC,EAAE,GAAGF,QAAQ,CAACG,SAAT,EAAX;AAEA,OAAO,IAAMC,aAAa;AAAA,sEAAG,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3B;AAEA;AACAH,YAAAA,EAAE,CAACI,UAAH,CAAc,OAAd,EACGC,GADH,CACOF,MADP,cAGGG,IAHH,CAGQC,OAAO,CAACC,GAAR,CAAY,kBAAZ,CAHR,WAIS,UAACC,CAAD;AAAA,qBAAOF,OAAO,CAACC,GAAR,CAAYC,CAAZ,CAAP;AAAA,aAJT,EAJ2B,CAU3B;;AAV2B;AAAA,mBAWET,EAAE,CAC5BI,UAD0B,CACf,QADe,EAE1BM,KAF0B,CAEpB,UAFoB,EAER,IAFQ,EAEFP,MAFE,EAG1BQ,GAH0B,EAXF;;AAAA;AAWrBC,YAAAA,cAXqB;AAe3BA,YAAAA,cAAc,CAACC,OAAf,CAAuB,UAACC,SAAD,EAAe;AACpC;AACAf,cAAAA,WAAW,CAACe,SAAS,CAACC,EAAX,CAAX;AACD,aAHD,EAf2B,CAoB3B;;AApB2B;AAAA,mBAqBrBf,EAAE,CACLI,UADG,CACQ,aADR,EAEHM,KAFG,CAEG,YAFH,EAEiB,IAFjB,EAEuBP,MAFvB,EAGHO,KAHG,CAGG,YAHH,EAGiB,IAHjB,EAGuBP,MAHvB,EAIHQ,GAJG,GAKHL,IALG,CAKE,UAACU,mBAAD,EAAyB;AAC7B,kBAAMC,KAAK,GAAGnB,QAAQ,CAACG,SAAT,GAAqBgB,KAArB,EAAd;AACAD,cAAAA,mBAAmB,CAACH,OAApB,CAA4B,UAACK,gBAAD,EAAsB;AAChDD,gBAAAA,KAAK,UAAL,CAAaC,gBAAgB,CAACC,GAA9B;AACD,eAFD;AAGAF,cAAAA,KAAK,CACFG,MADH,GAEGd,IAFH,CAEQC,OAAO,CAACC,GAAR,CAAY,qBAAZ,CAFR,WAGS,UAACC,CAAD;AAAA,uBAAOF,OAAO,CAACC,GAAR,CAAYC,CAAZ,CAAP;AAAA,eAHT;AAID,aAdG,CArBqB;;AAAA;AAqC3BX,YAAAA,QAAQ,CACLuB,IADH,GAEGC,WAFH,aAGGhB,IAHH,CAGQ;AAAA,qBAAMC,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAN;AAAA,aAHR,WAIS,UAACC,CAAD;AAAA,qBAAOF,OAAO,CAACC,GAAR,CAAYC,CAAZ,CAAP;AAAA,aAJT;;AArC2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbP,aAAa;AAAA;AAAA;AAAA,GAAnB","sourcesContent":["import firebase from \"../firebase/init\";\nimport { deleteTweet } from \"./DeleteTweet\";\n\nconst db = firebase.firestore();\n\nexport const deleteAccount = async (userID) => {\n  // Delete user from firebase authentication\n\n  // Delete user doc from \"users\" collection\n  db.collection(\"users\")\n    .doc(userID)\n    .delete()\n    .then(console.log(\"Deleted User Doc\"))\n    .catch((e) => console.log(e));\n\n  // Get all tweets that has authorID = user.uid in \"tweets\" collection\n  const tweetsSnapShot = await db\n    .collection(\"tweets\")\n    .where(\"authorId\", \"==\", userID)\n    .get();\n  tweetsSnapShot.forEach((tweetsDoc) => {\n    // Delete those tweets\n    deleteTweet(tweetsDoc.id);\n  });\n\n  // Delete all connections\n  await db\n    .collection(\"connections\")\n    .where(\"followerID\", \"==\", userID)\n    .where(\"followeeID\", \"==\", userID)\n    .get()\n    .then((connectionsSnapShot) => {\n      const batch = firebase.firestore().batch();\n      connectionsSnapShot.forEach((connectionDocRef) => {\n        batch.delete(connectionDocRef.ref);\n      });\n      batch\n        .commit()\n        .then(console.log(\"Deleted Connections\"))\n        .catch((e) => console.log(e));\n    });\n\n  firebase\n    .auth()\n    .currentUser.delete()\n    .then(() => console.log(\"Deleted user from auth\"))\n    .catch((e) => console.log(e));\n};\n"]},"metadata":{},"sourceType":"module"}