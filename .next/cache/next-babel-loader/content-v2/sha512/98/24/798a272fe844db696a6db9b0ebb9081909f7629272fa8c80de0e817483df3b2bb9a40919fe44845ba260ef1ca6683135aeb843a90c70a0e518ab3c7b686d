{"ast":null,"code":"import _regeneratorRuntime from \"/Users/matthewfrances/Documents/development/School/Winter2021/SOEN357/twitter-clone/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/matthewfrances/Documents/development/School/Winter2021/SOEN357/twitter-clone/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"/Users/matthewfrances/Documents/development/School/Winter2021/SOEN357/twitter-clone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport firebase from \"../firebase/init\";\nvar db = firebase.firestore();\nexport var fetchUser = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var username, userID, userQuerySnapShot;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            username = _ref.username, userID = _ref.userID;\n\n            if (!username) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 4;\n            return db.collection(\"users\").where(\"username\", \"==\", username).get();\n\n          case 4:\n            userQuerySnapShot = _context.sent;\n\n            if (!userQuerySnapShot.empty) {\n              _context.next = 7;\n              break;\n            }\n\n            return _context.abrupt(\"return\", null);\n\n          case 7:\n            return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, userQuerySnapShot.docs[0].data()), {}, {\n              uid: userQuerySnapShot.docs[0].id\n            }));\n\n          case 8:\n            if (!userID) {\n              _context.next = 17;\n              break;\n            }\n\n            _context.next = 11;\n            return db.collection(\"users\").doc(userID).get();\n\n          case 11:\n            userQuerySnapShot = _context.sent;\n\n            if (!userQuerySnapShot.exists) {\n              _context.next = 16;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, userQuerySnapShot.data()), {}, {\n              uid: userQuerySnapShot.id\n            }));\n\n          case 16:\n            return _context.abrupt(\"return\", null);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchUser(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var fetchUserTweets = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(userID) {\n    var tweetsQuerySnapShot, fetchedUser, tweets;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return db.collection(\"tweets\").where(\"authorId\", \"==\", userID).where(\"parentTweet\", \"==\", null).get();\n\n          case 2:\n            tweetsQuerySnapShot = _context2.sent;\n            _context2.next = 5;\n            return fetchUser({\n              userID: userID\n            });\n\n          case 5:\n            fetchedUser = _context2.sent;\n            // tweets = tweets Array of  Objects\n            tweets = tweetsQuerySnapShot.docs.map(function (tweet) {\n              var data = tweet.data();\n              return _objectSpread(_objectSpread({\n                id: tweet.id\n              }, data), {}, {\n                author: fetchedUser,\n                createdAt: data.createdAt.toDate().toString()\n              });\n            }); // returns array of objects (tweets)\n\n            return _context2.abrupt(\"return\", tweets);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetchUserTweets(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var fetchTweet = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(tweetID) {\n    var tweet, user;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return firebase.firestore().collection(\"tweets\").doc(tweetID).get();\n\n          case 2:\n            tweet = _context3.sent;\n\n            if (tweet.exists) {\n              _context3.next = 5;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", null);\n\n          case 5:\n            _context3.next = 7;\n            return fetchUser({\n              userID: tweet.data().authorId\n            });\n\n          case 7:\n            user = _context3.sent;\n            return _context3.abrupt(\"return\", _objectSpread(_objectSpread({}, tweet.data()), {}, {\n              author: user,\n              id: tweetID,\n              createdAt: tweet.data().createdAt.toDate().toString()\n            }));\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function fetchTweet(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var fetchUserFollowers = /*#__PURE__*/function () {\n  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(userID) {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return db.collection(\"connections\").where(\"followeeID\", \"==\", userID).get();\n\n          case 2:\n            return _context4.abrupt(\"return\", _context4.sent);\n\n          case 3:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function fetchUserFollowers(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var fetchUserFollowings = /*#__PURE__*/function () {\n  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(userID) {\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.next = 2;\n            return db.collection(\"connections\").where(\"followerID\", \"==\", userID).get();\n\n          case 2:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 3:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function fetchUserFollowings(_x5) {\n    return _ref6.apply(this, arguments);\n  };\n}();\nexport var fetchTweetLikes = function fetchTweetLikes(tweetID) {\n  return firebase.firestore().collection(\"likes\").where(\"tweetID\", \"==\", tweetID).get();\n};\nexport var fetchTweetSaves = function fetchTweetSaves(tweetID) {\n  return firebase.firestore().collection(\"saves\").where(\"tweetID\", \"==\", tweetID).get();\n};\nexport var fetchTweets = function fetchTweets(queryParams) {\n  var dbQuery = firebase.firestore().collection(\"tweets\");\n\n  if (queryParams.tags.length > 0) {\n    queryParams.tags.forEach(function (tag) {\n      dbQuery = dbQuery.where(\"tags\", \"array-contains\", tag);\n    });\n  }\n\n  if (queryParams.titleFields.length > 0) {\n    queryParams.titleFields.forEach(function (field) {\n      dbQuery = dbQuery.where(\"titleFields\", \"array-contains\", field);\n    });\n  }\n\n  if (queryParams.text) {}\n\n  return dbQuery.get();\n};\n\nvar fetchAllUserData = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(username) {\n    var fetchedUser, tweets, followersCount, followingsCount;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return fetchUser({\n              username: username\n            });\n\n          case 2:\n            fetchedUser = _context6.sent;\n\n            if (!(fetchedUser === null)) {\n              _context6.next = 5;\n              break;\n            }\n\n            return _context6.abrupt(\"return\", null);\n\n          case 5:\n            _context6.next = 7;\n            return fetchUserTweets(fetchedUser.uid);\n\n          case 7:\n            tweets = _context6.sent;\n            _context6.next = 10;\n            return fetchUserFollowers(fetchedUser.uid);\n\n          case 10:\n            followersCount = _context6.sent.size;\n            _context6.next = 13;\n            return fetchUserFollowings(fetchedUser.uid);\n\n          case 13:\n            followingsCount = _context6.sent.size;\n            fetchedUser = _objectSpread(_objectSpread({}, fetchedUser), {}, {\n              followersCount: followersCount,\n              followingsCount: followingsCount\n            });\n            return _context6.abrupt(\"return\", {\n              fetchedUser: fetchedUser,\n              tweets: tweets\n            });\n\n          case 16:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function fetchAllUserData(_x6) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nexport default fetchAllUserData;","map":{"version":3,"sources":["/Users/matthewfrances/Documents/development/School/Winter2021/SOEN357/twitter-clone/src/services/FetchData.js"],"names":["firebase","db","firestore","fetchUser","username","userID","collection","where","get","userQuerySnapShot","empty","docs","data","uid","id","doc","exists","fetchUserTweets","tweetsQuerySnapShot","fetchedUser","tweets","map","tweet","author","createdAt","toDate","toString","fetchTweet","tweetID","authorId","user","fetchUserFollowers","fetchUserFollowings","fetchTweetLikes","fetchTweetSaves","fetchTweets","queryParams","dbQuery","tags","length","forEach","tag","titleFields","field","text","fetchAllUserData","followersCount","size","followingsCount"],"mappings":"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","sourcesContent":["import firebase from \"../firebase/init\";\n\nconst db = firebase.firestore();\n\nexport const fetchUser = async ({ username, userID }) => {\n  let userQuerySnapShot;\n\n  if (username) {\n    userQuerySnapShot = await db\n      .collection(\"users\")\n      .where(\"username\", \"==\", username)\n      .get();\n    if (userQuerySnapShot.empty) {\n      return null;\n    }\n    return {\n      ...userQuerySnapShot.docs[0].data(),\n      uid: userQuerySnapShot.docs[0].id,\n    };\n  }\n\n  if (userID) {\n    userQuerySnapShot = await db.collection(\"users\").doc(userID).get();\n    if (userQuerySnapShot.exists) {\n      return {\n        ...userQuerySnapShot.data(),\n        uid: userQuerySnapShot.id,\n      };\n    } else {\n      return null;\n    }\n  }\n};\n\nexport const fetchUserTweets = async (userID) => {\n  const tweetsQuerySnapShot = await db\n    .collection(\"tweets\")\n    .where(\"authorId\", \"==\", userID)\n    .where(\"parentTweet\", \"==\", null)\n    .get();\n\n  const fetchedUser = await fetchUser({ userID });\n\n  // tweets = tweets Array of  Objects\n  const tweets = tweetsQuerySnapShot.docs.map((tweet) => {\n    const data = tweet.data();\n\n    return {\n      id: tweet.id,\n      ...data,\n      author: fetchedUser,\n      createdAt: data.createdAt.toDate().toString(),\n    };\n  });\n  // returns array of objects (tweets)\n  return tweets;\n};\n\nexport const fetchTweet = async (tweetID) => {\n  const tweet = await firebase\n    .firestore()\n    .collection(\"tweets\")\n    .doc(tweetID)\n    .get();\n\n  if (!tweet.exists) return null;\n  const user = await fetchUser({ userID: tweet.data().authorId });\n  return {\n    ...tweet.data(),\n    author: user,\n    id: tweetID,\n    createdAt: tweet.data().createdAt.toDate().toString(),\n  };\n};\n\nexport const fetchUserFollowers = async (userID) => {\n  return await db\n    .collection(\"connections\")\n    .where(\"followeeID\", \"==\", userID)\n    .get();\n};\n\nexport const fetchUserFollowings = async (userID) => {\n  return await db\n    .collection(\"connections\")\n    .where(\"followerID\", \"==\", userID)\n    .get();\n};\n\nexport const fetchTweetLikes = (tweetID) => {\n  return firebase\n    .firestore()\n    .collection(\"likes\")\n    .where(\"tweetID\", \"==\", tweetID)\n    .get();\n};\n\nexport const fetchTweetSaves = (tweetID) => {\n  return firebase\n    .firestore()\n    .collection(\"saves\")\n    .where(\"tweetID\", \"==\", tweetID)\n    .get();\n};\n\nexport const fetchTweets = (queryParams) => {\n  let dbQuery = firebase.firestore().collection(\"tweets\");\n  \n  if (queryParams.tags.length > 0) {\n    queryParams.tags.forEach(tag => {\n      dbQuery = dbQuery.where(\"tags\", \"array-contains\", tag);\n    });\n  }\n  if (queryParams.titleFields.length > 0) {\n    queryParams.titleFields.forEach(field => {\n      dbQuery = dbQuery.where(\"titleFields\", \"array-contains\", field);\n    });\n  }\n\n  if (queryParams.text) {\n\n  }\n\n  return dbQuery.get(); \n}\n\nconst fetchAllUserData = async (username) => {\n  let fetchedUser = await fetchUser({ username });\n  if (fetchedUser === null) {\n    return null;\n  }\n  const tweets = await fetchUserTweets(fetchedUser.uid);\n  const followersCount = (await fetchUserFollowers(fetchedUser.uid)).size;\n  const followingsCount = (await fetchUserFollowings(fetchedUser.uid)).size;\n  fetchedUser = {\n    ...fetchedUser,\n    followersCount,\n    followingsCount,\n  };\n\n  return {\n    fetchedUser,\n    tweets,\n  };\n};\n\nexport default fetchAllUserData;\n"]},"metadata":{},"sourceType":"module"}