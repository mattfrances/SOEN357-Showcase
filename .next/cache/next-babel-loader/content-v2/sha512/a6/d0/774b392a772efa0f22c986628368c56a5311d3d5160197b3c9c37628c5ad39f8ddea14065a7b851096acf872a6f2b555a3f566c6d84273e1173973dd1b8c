{"ast":null,"code":"import React, { useContext } from \"react\";\nimport UserContext from \"../context/UserContext\";\nimport { fetchUser, fetchUserFollowers } from \"../services/FetchData\";\nexport function useFollowers(userId, authUserID) {\n  const {\n    user\n  } = useContext(UserContext);\n  const [followers, setFollowers] = React.useState([]);\n  const [isFollowersLoading, setIsFollowersLoading] = React.useState(true);\n\n  const getFollowers = async () => {\n    const data = [];\n    setIsFollowersLoading(true);\n\n    if (user) {\n      const followersSnapShot = await fetchUserFollowers(userId, authUserID);\n\n      for (let i = 0; i < followersSnapShot.size; i++) {\n        data.push(await fetchUser({\n          userID: followersSnapShot.docs[i].data().followerID\n        }));\n      }\n    }\n\n    setFollowers(data);\n    setIsFollowersLoading(false);\n  };\n\n  return {\n    followers,\n    isFollowersLoading,\n    getFollowers\n  };\n}","map":{"version":3,"sources":["/Users/matthewfrances/Documents/development/School/Winter2021/SOEN357/twitter-clone/src/hooks/useFollowers.js"],"names":["React","useContext","UserContext","fetchUser","fetchUserFollowers","useFollowers","userId","authUserID","user","followers","setFollowers","useState","isFollowersLoading","setIsFollowersLoading","getFollowers","data","followersSnapShot","i","size","push","userID","docs","followerID"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,SAASC,SAAT,EAAoBC,kBAApB,QAA8C,uBAA9C;AAEA,OAAO,SAASC,YAAT,CAAsBC,MAAtB,EAA8BC,UAA9B,EAA0C;AAC/C,QAAM;AAAEC,IAAAA;AAAF,MAAWP,UAAU,CAACC,WAAD,CAA3B;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BV,KAAK,CAACW,QAAN,CAAe,EAAf,CAAlC;AACA,QAAM,CAACC,kBAAD,EAAqBC,qBAArB,IAA8Cb,KAAK,CAACW,QAAN,CAAe,IAAf,CAApD;;AAEA,QAAMG,YAAY,GAAG,YAAY;AAC/B,UAAMC,IAAI,GAAG,EAAb;AACAF,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AACA,QAAIL,IAAJ,EAAU;AACR,YAAMQ,iBAAiB,GAAG,MAAMZ,kBAAkB,CAACE,MAAD,EAASC,UAAT,CAAlD;;AACA,WAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,iBAAiB,CAACE,IAAtC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/CF,QAAAA,IAAI,CAACI,IAAL,CACE,MAAMhB,SAAS,CAAC;AACdiB,UAAAA,MAAM,EAAEJ,iBAAiB,CAACK,IAAlB,CAAuBJ,CAAvB,EAA0BF,IAA1B,GAAiCO;AAD3B,SAAD,CADjB;AAKD;AACF;;AACDZ,IAAAA,YAAY,CAACK,IAAD,CAAZ;AACAF,IAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD,GAfD;;AAiBA,SAAO;AAAEJ,IAAAA,SAAF;AAAaG,IAAAA,kBAAb;AAAiCE,IAAAA;AAAjC,GAAP;AACD","sourcesContent":["import React, { useContext } from \"react\";\nimport UserContext from \"../context/UserContext\";\nimport { fetchUser, fetchUserFollowers } from \"../services/FetchData\";\n\nexport function useFollowers(userId, authUserID) {\n  const { user } = useContext(UserContext);\n  const [followers, setFollowers] = React.useState([]);\n  const [isFollowersLoading, setIsFollowersLoading] = React.useState(true);\n\n  const getFollowers = async () => {\n    const data = [];\n    setIsFollowersLoading(true);\n    if (user) {\n      const followersSnapShot = await fetchUserFollowers(userId, authUserID);\n      for (let i = 0; i < followersSnapShot.size; i++) {\n        data.push(\n          await fetchUser({\n            userID: followersSnapShot.docs[i].data().followerID,\n          })\n        );\n      }\n    }\n    setFollowers(data);\n    setIsFollowersLoading(false);\n  };\n\n  return { followers, isFollowersLoading, getFollowers };\n}\n"]},"metadata":{},"sourceType":"module"}